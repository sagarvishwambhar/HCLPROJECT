package com.hclcv.generated.restfulapi;

import java.util.*;

import com.hclcv.generated.mapper.ProjectdetailsMapper;
import com.hclcv.generated.model.Projectdetails;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.hclcv.generated.service.ProjectdetailsService;
import javax.annotation.Generated;
import javax.annotation.Generated;

@Generated(
	value = {
		"https://github.com/coolcooldee/sloth",
		"Sloth version:1.0"
	},
	comments = "This class is generated by Sloth"
)
@RestController
@RequestMapping(value = "/projectdetails")
public class ProjectdetailsController {

	@Autowired
	private ProjectdetailsService projectdetailsService;
	
	@Autowired
	ProjectdetailsMapper projectdetailsMapper;


	@RequestMapping(value = "/test", method = RequestMethod.GET)
	public String test(@ModelAttribute Projectdetails projectdetails) {
		return "success";
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public void save(@ModelAttribute Projectdetails projectdetails) {

		System.out.println(projectdetails.getSapid());
		System.out.println("Project"+projectdetails.getProjectdetailsinfo());
		
		Projectdetails mainprojectdetails = new Projectdetails();
		mainprojectdetails.setId(projectdetails.getId());
		mainprojectdetails.setProjectdetailsinfo(projectdetails.getProjectdetailsinfo().trim());
		mainprojectdetails.setDuration2(projectdetails.getDuration2().trim());
		mainprojectdetails.setTeamsize(projectdetails.getTeamsize().trim());
		mainprojectdetails.setRoleposition(projectdetails.getRoleposition().trim());
		mainprojectdetails.setProjectdescription(projectdetails.getProjectdescription().trim());
		mainprojectdetails.setTechnicalenvironment(projectdetails.getTechnicalenvironment().trim());
		mainprojectdetails.setResponsibility(projectdetails.getResponsibility().trim());
		mainprojectdetails.setSapid(projectdetails.getSapid().trim());
		mainprojectdetails.setEmployeeid(projectdetails.getEmployeeid());
		projectdetailsMapper.save(mainprojectdetails);
		
		//		projectdetailsService.save(projectdetails);
	}

	@RequestMapping(value = "/delete/{id}", method = RequestMethod.POST)
	public void  delete(@PathVariable Integer id) {
		projectdetailsService.deleteById(id);
	}

	@RequestMapping(value = "/view/{id}", method = RequestMethod.GET)
	public Projectdetails  view(@PathVariable Integer id) {
		return projectdetailsService.getById(id);
	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public void update(@ModelAttribute Projectdetails projectdetails) {
		Projectdetails mainprojectdetails = new Projectdetails();
		mainprojectdetails.setId(projectdetails.getId());
		mainprojectdetails.setProjectdetailsinfo(projectdetails.getProjectdetailsinfo());
		mainprojectdetails.setDuration2(projectdetails.getDuration2());
		mainprojectdetails.setTeamsize(projectdetails.getTeamsize());
		mainprojectdetails.setRoleposition(projectdetails.getRoleposition());
		mainprojectdetails.setProjectdescription(projectdetails.getProjectdescription());
		mainprojectdetails.setTechnicalenvironment(projectdetails.getTechnicalenvironment());
		mainprojectdetails.setResponsibility(projectdetails.getResponsibility());
		mainprojectdetails.setSapid(projectdetails.getSapid());
		mainprojectdetails.setEmployeeid(projectdetails.getEmployeeid());
		projectdetailsMapper.save(mainprojectdetails);

		//		projectdetailsService.update(projectdetails);
	}


	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public List<Projectdetails> list() {
		return projectdetailsService.list();
	}


}